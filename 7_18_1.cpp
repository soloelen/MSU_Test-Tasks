#include <iostream>
using namespace std;

/*Опишите абстрактный класс RealFunction, предсталяющий некую абстрактную математическую функцию f: R→ R,
то есть, объект такого класса соответствует некоторому правилу, по которому из одного действительного числа
получается другое действительное число; значение в точке 0 (то есть, f(0)) задается параметром конструктора
и хранится в объекте, значения в других точках определяются чисто виртуальной функцией (можете выбрать для
неё любое имя), которая возвращает для каждой точки значение за вычетом f0, где f0=f(0). Предполагается,что
для точки 0 наша чисто виртуальная функция всегда возвращает 0. Например, для функции f(x)=sin x + 5 число 5
мы будем хранить как значение в точке 0, а чисто виртуальная функция будет переопределена так, чтобы считать
sin x. Для представления действительных чисел используйте тип double. Предусмотрите в классе перегрузку 
стандартной операции вызова функции (double operator() (double x) ), которая будет возвращать значение функции
(ясно, что для этого нужно вызвать вашу чисто виртуальную функцию и прибавить к ней хранимое значение f0).
Унаследуйте от класса RealFunction класс Linear, представляющий математическое понятие линейной функции,
то есть, функции вида f(x) = ax + b, причем параметры a и b должны задаваться в конструкторе, для коэффициента
a предусматривается поле в новом классе. Свободный член b, равный значению функции в точке 0, хранится в базовом
классе (он равен f0). Таким образом, чисто виртуальная функция базового класса должна быть в классе Linear
переопределена так, чтобы возвращать значение выражения ax. Учтите, что во время тестирования от вашего базового
класса будут наследоваться и другие потомки.*/


class RealFunction
{
	double f0;
public:
	RealFunction(double x): f0(x) {}
	virtual double FuncComp(double x) = 0;
	double operator () (double x) {return FuncComp(x) + f0;}
};


class Linear: public RealFunction
{
	double a;
public:
	Linear(double aa, double bb): RealFunction(bb), a(aa) {}
	virtual double FuncComp(double x) {return a * x;}
	
};

int main()
{
	Linear l(1.5, 2.3);
	
	cout << l(1.0) << endl;
	
	return 0;
}
